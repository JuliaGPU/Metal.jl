steps:
  # Julia versions
  - group: ":julia: Julia"
    key: "julia"
    steps:
      - label: "Julia {{matrix.julia}}"
        plugins:
          - JuliaCI/julia#v1:
              version: "{{matrix.julia}}"
          - JuliaCI/julia-test#v1:
              test_args: "--quickfail"
          - JuliaCI/julia-coverage#v1:
              codecov: true
              dirs:
                - src
                - lib
                - examples
        agents:
          queue: "juliaecosystem"
          os: "macos"
          arch: "aarch64"
        if: build.message !~ /\[skip tests\]/
        timeout_in_minutes: 60
        matrix:
          setup:
            julia:
              - "1.10"
              - "1.11"
              - "nightly"
          adjustments:
            - with:
                julia: "nightly"
              soft_fail: true

  # special tests
  - group: ":eyes: Special"
    depends_on: "julia"
    steps:
      - label: "{{matrix.storage}} array storage"
        plugins:
          - JuliaCI/julia#v1:
              version: "1.10"
          - JuliaCI/julia-test#v1:
              test_args: "--quickfail"
        agents:
          queue: "juliaecosystem"
          os: "macos"
          arch: "aarch64"
        if: build.message !~ /\[skip tests\]/ && !build.pull_request.draft
        timeout_in_minutes: 60
        matrix:
          setup:
            storage:
              - "shared"
              - "managed"
        commands: |
          echo -e "[Metal]\ndefault_storage = \"{{matrix.storage}}\"" >LocalPreferences.toml
      - label: "API validation"
        plugins:
          - JuliaCI/julia#v1:
              version: "1.10"
          - JuliaCI/julia-test#v1:
              test_args: "--quickfail metal"
              # only enabled for select tests due to JuliaGPU/Metal.jl#34
          - JuliaCI/julia-coverage#v1:
              codecov: true
              dirs:
                - src
                - lib
                - examples
        env:
          MTL_DEBUG_LAYER: '1'
          MTL_SHADER_VALIDATION: '1'
        agents:
          queue: "juliaecosystem"
          os: "macos"
          arch: "aarch64"
        if: build.message !~ /\[skip tests\]/ && !build.pull_request.draft
        timeout_in_minutes: 60
      - label: "Opaque pointers"
        plugins:
          - JuliaCI/julia#v1:
              version: "1.10"
          - JuliaCI/julia-test#v1:
              test_args: "--quickfail"
          - JuliaCI/julia-coverage#v1:
              codecov: true
              dirs:
                - src
                - lib
                - examples
        env:
          JULIA_LLVM_ARGS: '--opaque-pointers'
        agents:
          queue: "juliaecosystem"
          os: "macos"
          arch: "aarch64"
        if: build.message !~ /\[skip tests\]/ && !build.pull_request.draft
        timeout_in_minutes: 60

  # we want to benchmark every commit on the master branch, even if it failed CI
  - wait: ~
    # continue_on_failure: true

  - group: ":racehorse: Benchmarks"
    steps:
      # benchmarks outside of the master branch don't submit their results,
      # so they can run on any system in the juliagpu queue.
      - label: "Benchmarks (dry run)"
        plugins:
          - JuliaCI/julia#v1:
              version: "1.10"
        command: |
          julia --project -e '
            using Pkg

            println("--- :julia: Instantiating project")
            Pkg.resolve()
            Pkg.instantiate()
            Pkg.activate("perf")
            Pkg.resolve()
            Pkg.instantiate()
            push!(LOAD_PATH, @__DIR__)

            println("+++ :julia: Benchmarking")
            include("perf/runbenchmarks.jl")'
        agents:
          queue: "juliaecosystem"
          os: "macos"
          arch: "aarch64"
        if: |
          build.message =~ /\[only benchmarks\]/ ||
          build.message !~ /\[only/ && !build.pull_request.draft &&
            build.message !~ /\[skip benchmarks\]/
        timeout_in_minutes: 30

      # if we will submit results, use the benchmark queue so that we will
      # be running on the same system each time
      # - label: "Benchmarks on Julia {{matrix.julia}}"
      #   plugins:
      #     - JuliaCI/julia#v1:
      #         version: "{{matrix.julia}}"
      #   env:
      #     BENCHMARKS: "true"
      #     CODESPEED_PROJECT: "$BUILDKITE_PIPELINE_NAME"
      #     CODESPEED_BRANCH: "$BUILDKITE_BRANCH"
      #     CODESPEED_COMMIT: "$BUILDKITE_COMMIT"
      #     CODESPEED_EXECUTABLE: "Julia {{matrix.julia}}"
      #   command: |
      #     julia --project -e '
      #       using Pkg
      #       ENV["CODESPEED_ENVIRONMENT"] = ENV["BUILDKITE_AGENT_NAME"]

      #       println("--- :julia: Instantiating project")
      #       Pkg.resolve()
      #       Pkg.instantiate()
      #       Pkg.activate("perf")
      #       Pkg.resolve()
      #       Pkg.instantiate()
      #       push!(LOAD_PATH, @__DIR__)

      #       println("+++ :julia: Benchmarking")
      #       include("perf/runbenchmarks.jl")'
      #   agents:
      #     queue: "benchmark"
      #     gpu: "rtx2070"
      #     cuda: "*"
      #   if: |
      #     build.branch =~ /^master$$/ && build.message =~ /\[only benchmarks\]/ ||
      #     build.branch =~ /^master$$/ && build.message !~ /\[only/ &&
      #       build.message !~ /\[skip benchmarks\]/
      #   matrix:
      #     setup:
      #       julia:
      #         - "1.10"
      #         - "1.11"
      #   timeout_in_minutes: 30
