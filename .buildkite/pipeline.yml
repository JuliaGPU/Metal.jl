steps:
  # Julia versions
  - group: ":julia: Julia"
    key: "julia"
    steps:
      - label: "Julia {{matrix.julia}}"
        plugins:
          - JuliaCI/julia#v1:
              version: "{{matrix.julia}}"
          - JuliaCI/julia-test#v1:
              test_args: "--quickfail"
          - JuliaCI/julia-coverage#v1:
              codecov: true
              dirs:
                - src
                - lib
        agents:
          queue: "juliaecosystem"
          os: "macos"
          arch: "aarch64"
        if: |
          build.message =~ /\[only tests\]/ ||
          build.message =~ /\[only julia\]/ ||
          build.message !~ /\[only/ &&
            build.message !~ /\[skip tests\]/ &&
            build.message !~ /\[skip julia\]/
        timeout_in_minutes: 60
        matrix:
          setup:
            julia:
              - "1.10"
              - "1.11"
              - "nightly"
          adjustments:
            - with:
                julia: "nightly"
              soft_fail: true

  # special tests
  - group: ":floppy_disk: Storage Modes"
    depends_on: "julia"
    steps:
      - label: "{{matrix.storage}} array storage"
        plugins:
          - JuliaCI/julia#v1:
              version: "1.11"
          - JuliaCI/julia-test#v1:
              test_args: "--quickfail"
        agents:
          queue: "juliaecosystem"
          os: "macos"
          arch: "aarch64"
        if: |
          build.message =~ /\[only tests\]/ ||
          build.message =~ /\[only storage\]/ ||
          build.message !~ /\[only/ && !build.pull_request.draft &&
            build.message !~ /\[skip tests\]/ &&
            build.message !~ /\[skip storage\]/
        timeout_in_minutes: 60
        matrix:
          setup:
            storage:
              - "shared"
              - "managed"
        commands: |
          echo -e "[Metal]\ndefault_storage = \"{{matrix.storage}}\"" >LocalPreferences.toml

  # special tests
  - group: ":eyes: Special"
    depends_on: "julia"
    steps:
      - label: "API validation"
        soft_fail: true
        plugins:
          - JuliaCI/julia#v1:
              version: "1.11"
          - JuliaCI/julia-test#v1:
              # test_args: "--quickfail"
              test_args: ""
              # Don't quickfail to see which ones fail
          - JuliaCI/julia-coverage#v1:
              codecov: true
              dirs:
                - src
                - lib
        env:
          MTL_DEBUG_LAYER: '1'
          MTL_SHADER_VALIDATION: '1'
        agents:
          queue: "juliaecosystem"
          os: "macos"
          arch: "aarch64"
          macos_version: "15.0"
        if: |
          build.message =~ /\[only tests\]/ ||
          build.message =~ /\[only validation\]/ ||
          build.message =~ /\[only special\]/ ||
          build.message !~ /\[only/ && !build.pull_request.draft &&
            build.message !~ /\[skip tests\]/ &&
            build.message !~ /\[skip validation\]/ &&
            build.message !~ /\[skip special\]/
        timeout_in_minutes: 60
      - label: "Opaque pointers"
        plugins:
          - JuliaCI/julia#v1:
              version: "1.11"
          - JuliaCI/julia-test#v1:
              test_args: "--quickfail"
          - JuliaCI/julia-coverage#v1:
              codecov: true
              dirs:
                - src
                - lib
        env:
          JULIA_LLVM_ARGS: '--opaque-pointers'
        agents:
          queue: "juliaecosystem"
          os: "macos"
          arch: "aarch64"
        if: |
          build.message =~ /\[only tests\]/ ||
          build.message =~ /\[only special\]/ ||
          build.message !~ /\[only/ && !build.pull_request.draft &&
            build.message !~ /\[skip tests\]/ &&
            build.message !~ /\[skip special\]/
        timeout_in_minutes: 60

  - wait: ~
    continue_on_failure: true

  - label: ":racehorse: Benchmarks"
    plugins:
      - JuliaCI/julia#v1:
          version: "1.11"
    command: |
      julia --project=perf -e '
        using Pkg

        println("--- :julia: Instantiating project")
        Pkg.develop([PackageSpec(path=pwd())])
        Pkg.add(url="https://github.com/JuliaGPU/AcceleratedKernels.jl", rev="main")

        println("+++ :julia: Benchmarking")
        include("perf/runbenchmarks.jl")'
    artifact_paths:
      - "benchmarkresults.json"
    agents:
      queue: "juliaecosystem"
      os: "macos"
      arch: "aarch64"
    if: |
      build.message =~ /\[only benchmarks\]/ ||
      build.message !~ /\[only/ && !build.pull_request.draft &&
        build.message !~ /\[skip benchmarks\]/
    timeout_in_minutes: 30
